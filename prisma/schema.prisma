// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  GUEST
}

enum offerType {
  RENT
  SALE
}

model user {
  id        String   @id @default(uuid())
  name      String
  phone     String   @unique
  email     String   @unique
  password  String
  role      Role     @default(GUEST)
  socket    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatsFrom chat[]   @relation("FromUser")
  chatsTo   chat[]   @relation("ToUser")
}

model guest {
  id        String   @id @default(uuid())
  guestId   String   @unique @default(uuid())
  socket    String?
  remark    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatsFrom chat[]   @relation("FromGuest")
  chatsTo   chat[]   @relation("ToGuest")
}

model property {
  id             String       @id @default(uuid())
  title          String
  description    String       @db.Text
  offer_type     offerType
  propertyType   propertyType @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId String
  location       String
  quantity       Int
  price          Float
  discount       Float
  currency       String
  images         String[]
  youtubeLink    String?
  kitchen        Int
  bedroom        Int
  squareMeter    Int
  parking        Int
  isAvailable    Boolean      @default(false)
  isDraft        Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model propertyType {
  id          String     @id @default(uuid())
  name        String
  photo       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  property    property[]
}

model feedback {
  id         String   @id @default(uuid())
  guestId    String
  propertyId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model promotion {
  id          String   @id @default(uuid())
  title       String
  description String?
  image       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model propertyRequest {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  email        String
  phone        String
  offerType    String
  propertyType String
  maxPrice     Float
  bedrooms     Int
  bathrooms    Int
  minimumSize  Int
  message      String?
  isVisited    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model propertyRegistration {
  id           String   @id @default(uuid())
  fullname     String
  phone        Int
  type         String
  propertyType String
  location     String
  realLocation String
  description  String
  isVisit      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isVisited    Boolean  @default(false)
}

model chat {
  id          String   @id @default(uuid())
  fromUser    user?    @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId  String?
  fromGuest   guest?   @relation("FromGuest", fields: [fromGuestId], references: [id], onDelete: Cascade)
  fromGuestId String?
  toUser      user?    @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId    String?
  toGuest     guest?   @relation("ToGuest", fields: [toGuestId], references: [id], onDelete: Cascade)
  toGuestId   String?
  msg         String
  // remark      String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Ensure only guest<->admin messages are allowed (enforced in application logic)
  // guest to guest and admin to admin are not allowed

  @@index([fromUserId, toUserId])
  @@index([fromGuestId, toGuestId])
}
